make project:
1 - in cmd go to directory you want to make your project in
2 - composer create-project --prefer-dist laravel/laravel your_project_name
3 - open project in phpStorm, hint npm install shows, click on it and install settings
4 - go to app/Providers/AppServiceProviders and in boot() functions paste this code : Schema::defaultStringLength(191);
5 - project is ready to use you can make database in phpMyAdmin and set its configs in .env file
6 - add project to git
7 - if in adding project to github get error "repository not found" do this codes:
	git remote set-url origin YOUR_PROJECT_GITHUB_URL
	git add -A && git commit -m "my message"
8 - for install auth settings execute this command : php artisan make:auth
9 - for import ui template to your project do these steps :
	* copy css html .. dirctories of your template to a directory in your project like dir public/frontEnd
	* copy what ever of your template pages to your view resource
	* replace all style links to : <link href="{{asset('public/frontEnd')}}/WHAT_EVER_INSIDE" rel="stylesheet" .../>
	* replace all js scripts to  : <script src="{{asset('public/frontEnd')}}/WHAT_EVER_INSIDE" .../>
	* if you copied image files from template than replace all img tags to : <img src="{{asset('public/frontEnd')}}/WHAT_EVER_INSIDE" .../>

10 - for make custom config file : 
	* make a new php file in config folder of project with name like CustomConfigs
	* make a array like : 
		return array(
    			'MyConfigs' => array(
        		'temp' => 'valueTemp',
        		'temp2' => 'valueTemp2',
    		  ),
		);
	* in where to want use this config varaibles first import Config like : use Illuminate\Support\Facades\Config;
	* if want full array : $myConfigsArray = Config::get('CustomConfigs.MyConfigs', 'default');
	* if want single variable : $myWantedVariable => Config::get('CustomConfigs.MyConfigs.temp2');

11 - after make new migration copy code like this in the php class made my artisan :
	public function up() {
        	Schema::create('YOUR_TABLE_NAME', function (Blueprint $table) {
            		$table->increments('id');
            		$table->string('x')->default('');
            		$table->integer('x')->default(0);
            		$table->timestamps();
        	});
    	}
    
    	public function down() {
        	Schema::dropIfExists('YOUR_TABLE_NAME');
    	}

12 - to use cookies in laravel :
	* first know about .env and Config/session.php and also storage/framwork/sessions
	* and also to see Session like : dd($request->session()->get('YOUR_SESSION_NAME'));
	* make a class for your session object which should have constroctor for overwiting on old one and any other functions may needed
	* this is the way check your session pack existance :
		$oldCart = Session::has('YOUR_PACK_NAME') ? Session::get('YOUR_PACK_NAME') : null;
        	$cart = new Cart($oldCart);
	* after any change to the pack with functions you made in step 3, you can save them like :
		Session::put('YOUR_PACK_NAME',$cart);

13 - to make storage directory for files :
	* hint: they save in storate/app/public
	* this dir not available in browser so with siblink we make it's shourtcut in public folder
	* the command for make this connection is : php artisan storage:link
	* in code we make dir and files in path like : 'public/YOUR_DIR_NAME'

14 - to make email sending:
	* command : php artisan make:mail SendMail
	* in .env file set EMAIL configs
	* in app/Mail/SendMail make these changes:
		public $data;
    		public function __construct($data) {
        		$this->data = $data;
    		}

    		public function build() {
        		return $this->from('yourmail@mail.com')
            		->subject('YOUR_EMAIL_TITLE')
            		->view('dynamic_email_template')
            		->with('data', $this->data);
    		}

	* 'dynamic_email_template' is a blade view html with {{ $data['my_wanted_key']}} used inside it.
	* in controller where want to send email use codes like this:
		$data = array(
            		'email' => 'email_want_to_send_message_to@mail.com',
        	);
        	Mail::to('your_mail@mail.com')->send(new SendMail($data));

* Release notes:
15 - change alias localhost to domain :
	* click on wamp icon and go to : Apache/Alias directories/http://localhist/YOUR_PROJECT_NAME/Delete Alias (if exists)
	* in opend cmd say yes and your alias will be deleted
	* again click on wamp go to : Apache/httpd.conf recommended open it with phpStorm)
	* put code like this at end of the opened file (if they don't exist) :
		Include "${INSTALL_DIR}/alias/*"
		NameVirtualHost *:80
	* for each domain you want copy this code in it :
		<VirtualHost *:80>
    			DocumentRoot C:/wamp64/www/YOUR_PROJECT_DIR_NAME/public
    			ServerName YOUR_DOMAIN_NAME.local
		</VirtualHost>
	* go to file : C:\Windows\System32\drivers\etc and open file : hosts
	* add your server name : 127.0.0.1 YOUR_DOMAIN_NAME.local
	* flush dns in cmd, by paste code : ipconfig /flushdns
	* restart wamp services

 16 - database alias server and localhost :
	* after makeing database in server go to localhost phpmyAdmin than :
		- in YOUR_DATABASE_ROOT/operations/ -> rename database name same as server database
		- in SERVER_ROOT/privillages/ -> make new user same info as server database user
	* go to .env of the project and set the same database info we made
17 - user intlijIdea as ftp-manager :
	* go to : tools/Deployment/Brows Remote Host/ -> a side tab added to ide
	* click on ... icon (brows) and in Name set : ftp.YOUR_HOST_URL & in Type set : FTP
	* in new winodws open after click ok ->
		- in ftp host : YOUR_DOMAIN
		- in username & password set your ftp user pass
		- in Root path : select public_html path
	* in current window swith too tab Mappings ->
		- in local path : (default is correct) it should be the project folder root
		- in Deployment path : (default is correct) if it is public_html else set public_html
	* for auto upload files to server go to tools/Deployment/automatic upload
	* for uploading files to server ftp -> select files than go to : tools/Deployment/upload to ftp(YOUR_FTP_NAME)
	* to check status of local files and server files sync click root project go to : tools/Deployemnt/Sync with Deployed ftp(YOUR_FTP_NAME)
	* another way is use BeyondCopare program




















